@page "/demoballcollision"
@using Games.Client.Model;
@using System.Threading;
<h1>Blazor game test</h1>
<div>&copy; Linda Lawton 2019</div>

<p>Tests ball colision with paddle</p>


<GamePannel Game="@Game"></GamePannel>


<button class="btn btn-primary" @onclick="@btnTestRightSide" autofocus>Test Right side</button>
<button class="btn btn-primary" @onclick="@btnTestRightSide" autofocus>Test Left side</button>
<button class="btn btn-primary" @onclick="@btnTestRightSide" autofocus>Test Top side</button>
<button class="btn btn-primary" @onclick="@btnTestRightSide" autofocus>Test Bottom side</button>


@code {

    GameModel Game;

    public void btnTestRightSide()
    {

        Game = new GameModel();
        Game.Height = 400;
        Game.Width = 600;


        int myPaddleHeight = 100;
        int myPaddleLengith = 25;
        int myPaddleSpeed = 10;

        var pointIsPaddleLeftTopPoint = new Point((Game.Width / 2) - (myPaddleLengith / 2), (Game.Height / 2) - (myPaddleHeight / 2));
        var pointIsPaddleLeftBottomPoint = new Point((Game.Width / 2) - (myPaddleLengith / 2), (Game.Height / 2) + (myPaddleHeight / 2));
        var pointIsPaddleRightBottomPoint = new Point((Game.Width / 2) + (myPaddleLengith / 2), (Game.Height / 2) + (myPaddleHeight / 2));
        //var pointIsPaddleLeftBottomPoint = new Point((Game.Width / 2) + (myPaddleLengith / 2), (Game.Height / 2) - (myPaddleHeight / 2));

        Game.AddBall(5, 5, "fill:rgb(255,0,0);stroke-width:1;stroke:rgb(0,0,0)",
            pointIsPaddleLeftTopPoint,
            new Point(55 - 5, 200 - 5));
        Game.AddBall(5, 5, "fill:rgb(255,0,0);stroke-width:1;stroke:rgb(0,0,0)",
            pointIsPaddleLeftBottomPoint,
            new Point(55 - 5, 200 - 5));

        Game.AddBall(5, 5, "fill:rgb(255,255,255);stroke-width:1;stroke:rgb(0,0,0)",
            pointIsPaddleRightBottomPoint,
            new Point(55 - 5, 200 - 5));

        Game.Players = new Dictionary<string, Player>()
{
            { "playerone", new Player()
                            {
                            PlayerScore = new PaddleOptons(true, false, false, false),
                            Score = 0,
                            Paddles = new List<Paddle>()
{
                                new Paddle()
                                {
                                Height = myPaddleHeight,
                                Width = myPaddleLengith,
                                Speed = myPaddleSpeed,
                                Style = "fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)",
                                CurrentPosition = new Point((Game.Width / 2) - (myPaddleLengith / 2), (Game.Height / 2) - (myPaddleHeight / 2) ),
                                PaddleMovment = PaddleMovment.PaddleMovmentAll()
                                }
                            }
            }
        }
    };
        Game.Active = Game.Players.First().Value;


        var pointIsPaddleLeftTopPointValid = Game.Players.First().Value.Paddles.First().IsPaddleNew(pointIsPaddleLeftTopPoint.X, pointIsPaddleLeftTopPoint.Y);

        int i = 1;

    }


    protected override async Task OnInitAsync()
    {

        btnTestRightSide();
    }
}

